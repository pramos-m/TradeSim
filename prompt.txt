Hazme esta página en reflex y sqlite. Te mandaré las bases de mi proyecto. Quiero que te centres en que el diseño sea igual. Luego la conexión y como acceder a ella no me preocupa. Simplemente la pondré por la ruta de localhost/profile, más adelante la juntaré con el sistema actual una vez mi amigo haga la navbar donde se añadirá allá el link en el perfil.

La imagen que te he mandado es el diseño Hi-Fi, asegúrate que es igual. En caso de no tener foto, saldrá un recuadro en blanco. Si clickas encima de editar información, deberás poder escribir encima para cambiar.

Si clickas encima de la imagen deberías poder añadir una foto, aceptará solo PNG o JPG, bueno en realidad lo que sea más fácil de codear.

Si clickas en cerrar sesión se cerrará la sesión, eso ya está hecho solo que está puesto en el dashboard así qeu cambiaremos un poco las rutas.


Asegúrate de tener y usar/crear los modelos y controladores pertinentes para un buen file management.

Index.py:
import reflex as rx
from ..components.layouts.landing_layout import landing_layout
from ..components.buttons import navbar_button, comenzar_button
from ..state.auth_state import AuthState

LOGO_IMAGE = "./logo.svg"

def index_content() -> rx.Component:
    """Landing page content responsive."""
    return rx.box(
        # Logo con posición responsiva
        rx.box(
            rx.image(
                src="/logo.svg",
                height=["60px", "100px", "150px", "200px"],
                width="auto",
            ),
            position="absolute",
            top=["10px", "10px", "10px", "0"],
            left=["10px", "15px", "20px", "20px"],
            z_index="1",
        ),
        
        # Botón de navegación
        rx.box(
            rx.link(
                navbar_button(),
                href="/login",
            ),
            position="absolute",
            top=["10px", "20px", "40px", "60px"],
            right=["10px", "15px", "40px", "70px"],
            z_index="2",
        ),
        
        # DISEÑO UNIFICADO - Posición consistente en todos los tamaños
        rx.vstack(
            rx.box(
                rx.vstack(
                    # Primer título "Bienvenido"
                    rx.box(
                        rx.heading(
                            "Bienvenido",
                            font_family="mono",
                            font_size=["35px", "60px", "100px", "150px"],
                            white_space="nowrap",
                            color="black",
                            letter_spacing="tight",
                            font_weight="bold",
                        ),
                        bg="white",
                        padding=["10px", "15px", "25px", "40px"],
                        margin="0",
                        border_top_left_radius=["15px", "15px", "20px", "20px"],
                        border_top_right_radius=["15px", "15px", "20px", "20px"],
                        border_bottom_left_radius="0px",
                        border_bottom_right_radius=["-10px", "-15px", "-20px", "-20px"],
                        box_shadow="sm",
                        width=["200px", "350px", "500px", "750px"],
                        height=["auto", "auto", "120px", "175px"],
                        text_align="center",
                        justify_content="center",
                        display="flex",
                        align_items="center",
                        overflow="hidden",
                    ),
                    
                    # Segundo título "a TradeSim!!!"
                    rx.box(
                        rx.heading(
                            "a TradeSim!!!",
                            font_family="mono",
                            font_size=["35px", "60px", "100px", "150px"],
                            white_space="nowrap",
                            color="black",
                            letter_spacing="tight",
                            font_weight="bold",
                        ),
                        bg="white",
                        padding=["10px", "15px", "25px", "40px"],
                        margin="0",
                        border_top_left_radius="0px",
                        border_top_right_radius=["15px", "15px", "20px", "20px"],
                        border_bottom_left_radius=["15px", "15px", "20px", "20px"],
                        border_bottom_right_radius=["15px", "15px", "20px", "20px"],
                        box_shadow="sm",
                        width=["240px", "420px", "600px", "925px"],
                        height=["auto", "auto", "120px", "175px"],
                        text_align="center",
                        justify_content="center",
                        display="flex",
                        align_items="center",
                        overflow="hidden",
                    ),
                    spacing="0",
                    align_items="flex-start",
                    position="relative",
                ),
                # Margen consistente en todos los tamaños: 150px desde arriba
                margin_top=["150px", "150px", "150px", "150px"],
                padding_top="0",
            ),
            
            # Botón de comenzar
            rx.link(
                comenzar_button(),
                href="/login",
                margin_top=["25px", "40px", "60px", "80px"],
            ),
            # Posicionamiento consistente en todos los tamaños
            position="relative", # Cambiado a relative en todos los tamaños
            top="auto", # Eliminamos el posicionamiento vertical absoluto
            left="auto", # Eliminamos el posicionamiento horizontal absoluto
            align_items=["center", "center", "flex-start", "flex-start"],
            width="100%",
            justify_content=["center", "center", "flex-start", "flex-start"],
            padding_left=["0", "0", "5%", "10%"], # Desplazamiento horizontal controlado por padding
        ),
        width="100%",
        height="100vh",
        min_height="100vh",
        position="relative",
        overflow_x="hidden",
        display="flex",
        flex_direction="column",
    )

def index() -> rx.Component:
    # Asegurarnos de que no haya redirecciones basadas en autenticación
    # Eliminar cualquier rx.cond() o similar que redirija basado en AuthState.is_authenticated
    return landing_layout(index_content())

# Configure the page
index = rx.page(
    route="/",
    title="TradeSim - Inicio",
)(index)

main.py:
from tradesim import app

if __name__ == "__main__":
    app.start()

database.py:
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import os

# Ensure database is created in the correct location
DATABASE_PATH = os.path.join(os.path.dirname(__file__), "../tradesim.db")
DATABASE_URL = f"sqlite:///{DATABASE_PATH}"

# Create engine with absolute path to ensure correct location
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

def get_db():
    """Get a database session."""
    db = SessionLocal()
    try:
        return db
    except Exception:
        db.close()
        raise

def init_db_tables():
    """Explicitly import all models and create tables."""
    # Import all models so they are registered with Base
    from .models.user import User
    
    # Create all tables
    Base.metadata.create_all(bind=engine)
    print("Database tables initialized successfully!")

__init__.py:
import reflex as rx

# Create the application
app = rx.App()

# Import database and initialize tables
# Make sure this happens AFTER importing models
from .database import init_db_tables
init_db_tables()

# Import the pages
from .pages.index import index
from .pages.dashboard import dashboard
from .pages.login import login

# Import the state
from .state.auth_state import AuthState

# Add routes
app.add_page(index)
app.add_page(dashboard)
app.add_page(login)

# Set state
app.state = AuthState

__all__ = ["app"]


/utils/auth_middleware.py:
import reflex as rx
from functools import wraps
from typing import Callable
from ..state.auth_state import AuthState

def require_auth(page_function: Callable) -> Callable:
    """Decorator to protect routes that require authentication."""
    @wraps(page_function)
    def wrapped_page(*args, **kwargs):
        return rx.cond(
            AuthState.is_authenticated,
            page_function(*args, **kwargs),
            rx.center(
                rx.vstack(
                    rx.text("No has iniciado sesión. Redirigiendo al login...", color="red.500"),
                    rx.script("setTimeout(() => window.location.href = '/login', 1500);"),
                ),
                height="100vh",
            )
        )
    return wrapped_page

def public_only(page_function: Callable) -> Callable:
    """Middleware for public pages that don't need auth checks."""
    # Simply return the page without any auth checking
    return page_function

auth_state.py:
import reflex as rx
from typing import List
from datetime import datetime, timedelta
from jose import jwt, JWTError
import os
from ..database import SessionLocal
from ..models.user import User
from ..controller.user import get_user_by_email, get_user_by_username, get_user_by_id, create_user

SECRET_KEY = os.getenv("JWT_SECRET_KEY", "your-secret-key-here")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

class AuthState(rx.State):
    """Estado de autenticación mejorado."""
    # Authentication state
    is_authenticated: bool = False
    auth_token: str = rx.Cookie(name="auth_token", max_age=1800)
    processed_token: bool = False
    loading: bool = False
    
    # UI state
    active_tab: str = "login"
    error_message: str = ""
    
    # User data
    username: str = ""
    email: str = ""
    password: str = ""
    confirm_password: str = ""
    
    # Add this to track the last path processed
    last_path: str = ""
    
    def create_access_token(self, user_id: int) -> str:
        """Create JWT token for authentication."""
        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
        data = {"sub": str(user_id), "exp": expire}
        encoded_jwt = jwt.encode(data, SECRET_KEY, algorithm=ALGORITHM)
        return encoded_jwt
    
    def verify_token(self, token: str) -> int:
        """Verify JWT token and return user ID or -1 if invalid."""
        try:
            payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
            user_id = int(payload.get("sub"))
            return user_id
        except (JWTError, ValueError):
            return -1
    
    @rx.var
    def is_on_auth_page(self) -> bool:
        """Check if user is on login or registration page."""
        current_page = self.router.page.path
        return current_page == "/login"
    
    @rx.event
    async def on_load(self):
        """Handle page load authentication check."""
        # Get current path
        current_path = self.router.page.path
        
        # Si estamos en la ruta principal (/), nunca redirigimos
        if current_path == "/":
            self.processed_token = True
            self.last_path = "/"
            return
        
        # We have a token, verify it
        user_id = self.verify_token(self.auth_token)
        if user_id <= 0:
            # Invalid token
            self.is_authenticated = False
            self.auth_token = ""  # Clear invalid token
            
            # Only redirect if we're on a protected page
            if current_path == "/dashboard":
                return rx.redirect("/login")
            return
        
        # Valid token, fetch user data
        db = SessionLocal()
        try:
            user = get_user_by_id(db, user_id)
            if user:
                self.username = user.username
                self.email = user.email
                self.is_authenticated = True
                
                # Only redirect if we're on the login page and authenticated
                if current_path == "/login":
                    return rx.redirect("/dashboard")
            else:
                # User not found, clear auth
                self.is_authenticated = False
                self.auth_token = ""
                
                # Only redirect if we're on a protected page
                if current_path == "/dashboard":
                    return rx.redirect("/login")
        finally:
            db.close()

    @rx.event
    async def login(self):
        """Process login attempt."""
        self.error_message = ""
        self.loading = True
        
        if not self.email or not self.password:
            self.error_message = "Por favor complete todos los campos"
            self.loading = False
            return
        
        db = None
        try:
            db = SessionLocal()
            
            # Direct query without the controller
            user = db.query(User).filter(User.email == self.email).first()
            
            if not user or not user.verify_password(self.password):
                self.error_message = "Email o contraseña incorrectos"
                self.loading = False
                return
            
            # When login is successful:
            self.is_authenticated = True
            self.username = user.username
            token = self.create_access_token(user.id)
            self.auth_token = token
            
            # Update last path to prevent redirect loops
            self.last_path = "/dashboard" 
            self.processed_token = True
            
            self.loading = False
            return rx.redirect("/dashboard")
                
        except Exception as e:
            self.error_message = f"Error: {str(e)}"
            self.loading = False
        finally:
            if db:
                db.close()

    @rx.event
    async def register(self):
        """Process registration attempt."""
        self.error_message = ""
        self.loading = True
        
        # Validate fields
        if not self.username or not self.email or not self.password:
            self.error_message = "Por favor complete todos los campos"
            self.loading = False
            return
        
        if self.password != self.confirm_password:
            self.error_message = "Las contraseñas no coinciden"
            self.loading = False
            return
        
        db = None
        try:
            db = SessionLocal()
            
            # Check if user already exists
            existing_user = db.query(User).filter(
                (User.email == self.email) | (User.username == self.username)
            ).first()
            
            if existing_user:
                self.error_message = "Usuario o email ya están registrados"
                self.loading = False
                return
            
            # Create new user
            new_user = User(
                username=self.username,
                email=self.email
            )
            new_user.set_password(self.password)
            
            db.add(new_user)
            db.commit()
            db.refresh(new_user)
            
            # Create and store token
            token = self.create_access_token(new_user.id)
            self.auth_token = token
            self.is_authenticated = True
            
            # Update last path to prevent redirect loops
            self.last_path = "/dashboard"
            self.processed_token = True
            
            self.loading = False
            return rx.redirect("/dashboard")
                
        except Exception as e:
            self.error_message = f"Error: {str(e)}"
            self.loading = False
        finally:
            if db:
                db.close()

    @rx.event
    def logout(self):
        """Process logout."""
        # Reset all state
        self.is_authenticated = False
        self.username = ""
        self.email = ""
        self.password = ""
        self.confirm_password = ""
        
        # Important: Set processed_token to True to prevent immediate recheck
        self.processed_token = True
        self.last_path = "/"
        
        # Set to empty string to clear cookie
        self.auth_token = ""
        
        # Usar un script JavaScript para navegar directamente
        return rx.call_script("window.location.href = '/'")
    
    def set_active_tab(self, tab: str) -> None:
        """Switch between login/register tabs."""
        self.active_tab = tab
        self.error_message = ""
    
    def set_username(self, username: str) -> None:
        """Set username field."""
        self.username = username
        
    def set_email(self, email: str) -> None:
        """Set email field."""
        self.email = email
        
    def set_password(self, password: str) -> None:
        """Set password field."""
        self.password = password
        
    def set_confirm_password(self, confirm_password: str) -> None:
        """Set confirm password field."""
        self.confirm_password = confirm_password


dashboard.py:
import reflex as rx
from ..state.auth_state import AuthState
from ..utils.auth_middleware import require_auth

@require_auth
def dashboard_page() -> rx.Component:
    """Dashboard simple protegido por autenticación."""
    return rx.vstack(
        rx.box(
            rx.hstack(
                rx.image(src="/logo.svg", height="50px"),
                rx.spacer(),
                rx.text(f"Usuario: {AuthState.username}", margin_right="4"),
                rx.button(
                    "Cerrar Sesión",
                    on_click=AuthState.logout,
                    color_scheme="red",
                ),
                width="100%",
                padding="4",
                border_bottom="1px solid",
                border_color="gray.200",
            ),
        ),
        rx.center(
            rx.vstack(
                rx.heading(f"Bienvenido, {AuthState.username}!", size="9"),
                rx.text("Has iniciado sesión correctamente en TradeSim.", margin_y="4"),
                rx.flex(
                    rx.box(
                        rx.heading("Balance Actual", size="9"),
                        rx.heading("$10,000.00", size="9"),
                        rx.text("Balance inicial", color="gray.500"),
                        padding="4",
                        border="1px solid",
                        border_color="gray.200",
                        border_radius="md",
                    ),
                ),
                spacing="6",
                padding="8",
                border_radius="lg",
                box_shadow="xl",
                background="white",
                width="80%",
                max_width="800px",
            ),
            width="100%",
            padding_y="8",
        ),
        width="100%",
        min_height="100vh",
        background="gray.50",
    )

# Add page with on_load event to verify the token is valid
dashboard = rx.page(
    route="/dashboard",
    title="TradeSim - Dashboard",
    on_load=AuthState.on_load
)(dashboard_page)

/models/user.py;
from sqlalchemy import Column, Integer, String, Boolean, Float, DateTime
from sqlalchemy.sql import func
from ..database import Base
import bcrypt

class User(Base):
    __tablename__ = "users"
    
    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    email = Column(String, unique=True, index=True)
    hashed_password = Column(String)
    is_active = Column(Boolean, default=True)
    initial_balance = Column(Float, default=10000.0)
    created_at = Column(DateTime, server_default=func.now())
    updated_at = Column(DateTime, server_default=func.now(), onupdate=func.now())
    
    def set_password(self, password):
        """Hash password and store it."""
        salt = bcrypt.gensalt()
        self.hashed_password = bcrypt.hashpw(password.encode('utf-8'), salt).decode('utf-8')
    
    def verify_password(self, password):
        """Verify password against stored hash."""
        return bcrypt.checkpw(password.encode('utf-8'), self.hashed_password.encode('utf-8'))

/models/base.py:

# models/base.py
from sqlalchemy import Column, Integer, DateTime
from datetime import datetime
from ..database import Base

class BaseModel(Base):
    __abstract__ = True
    
    id = Column(Integer, primary_key=True, index=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)


/controllers/user.py:
from sqlalchemy.orm import Session
from ..models.user import User

def create_user(db: Session, username: str, email: str, password: str):
    """Create a new user with default balance."""
    user = User(username=username, email=email)
    user.set_password(password)
    db.add(user)
    db.commit()
    db.refresh(user)
    return user

def get_user_by_email(db: Session, email: str):
    """Get user by email."""
    return db.query(User).filter(User.email == email).first()

def get_user_by_username(db: Session, username: str):
    """Get user by username."""
    return db.query(User).filter(User.username == username).first()

def get_user_by_id(db: Session, user_id: int):
    """Get user by ID."""
    return db.query(User).filter(User.id == user_id).first()

